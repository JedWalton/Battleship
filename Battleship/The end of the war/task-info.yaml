type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/utils/Validation.java
  visible: true
  text: |
    package battleship.utils;

    import battleship.board.Board;
    import battleship.enums.ShipDirection;

    import java.util.Arrays;

    public class Validation {
        private Validation() {
        }


        public static boolean isValidShipPlacement(int[] UserInputBoardCoordsX1Y1X2Y2, Board board, int shipLength, String shipName) {

            if (!validShipDirection(UserInputBoardCoordsX1Y1X2Y2)) {
                System.out.println("Error! Wrong ship location! Try again:\n");
                return false;
            }
            if (!validShipLength(UserInputBoardCoordsX1Y1X2Y2, shipLength)) {
                System.out.println("Error! Wrong length of the " + shipName + "! Try again:\n");
                return false;
            }
            if (!shipIsInBounds(UserInputBoardCoordsX1Y1X2Y2)) {
                System.out.println("Error! Wrong ship location! Try again:\n");
                return false;
            }
            if (!ValidNotTooCloseToAnotherShip(UserInputBoardCoordsX1Y1X2Y2, board, shipLength)) {
                System.out.println("Error! You placed it too close to another one. Try again:\n");
                return false;
            }

            return true;
        }


        private static boolean ValidNotTooCloseToAnotherShip(int[] UserInputBoardCoordsX1Y1X2Y2, Board board, int shipLength) {
            ShipDirection shipDirection = Validation.calculateShipDirection(UserInputBoardCoordsX1Y1X2Y2);
            int x;
            int y;

            for (int i = 0; i < shipLength; i++) {
                if (shipDirection.equals(ShipDirection.East)) {
                    x = UserInputBoardCoordsX1Y1X2Y2[0] + i;
                    y = UserInputBoardCoordsX1Y1X2Y2[1];
                    if (!board.board[x][y].equals("~")) {
                        return false;
                    } else if (doesSurroundingTilesContainAnotherShip(x, y, board)) {
                        return false;
                    }
                } else if (shipDirection.equals(ShipDirection.West)) {
                    x = UserInputBoardCoordsX1Y1X2Y2[0] - i;
                    y = UserInputBoardCoordsX1Y1X2Y2[1];
                    if (!board.board[x][y].equals("~")) {
                        return false;
                    } else if (doesSurroundingTilesContainAnotherShip(x, y, board)) {
                        return false;
                    }
                } else if (shipDirection.equals(ShipDirection.North)) {
                    x = UserInputBoardCoordsX1Y1X2Y2[0];
                    y = UserInputBoardCoordsX1Y1X2Y2[1] - i;
                    if (!board.board[x][y].equals("~")) {
                        return false;
                    } else if (doesSurroundingTilesContainAnotherShip(x, y, board)) {
                        return false;
                    }
                } else if (shipDirection.equals(ShipDirection.South)) {
                    x = UserInputBoardCoordsX1Y1X2Y2[0];
                    y = UserInputBoardCoordsX1Y1X2Y2[1] + i;
                    if (!board.board[x][y].equals("~")) {
                        return false;
                    } else if (doesSurroundingTilesContainAnotherShip(x, y, board)) {
                        return false;
                    }
                }
            }
            return true;
        }

        private static boolean doesSurroundingTilesContainAnotherShip(int x, int y, Board board) {

            if (x + 1 < 10) {
                if (board.board[x + 1][y].equals("O")) {
                    return true;
                }
            }
            if (y + 1 < 10) {
                if (board.board[x][y + 1].equals("O")) {
                    return true;
                }
            }
            if (x - 1 > 0) {
                if (board.board[x - 1][y].equals("O")) {
                    return true;
                }
            }
            if (y - 1 > 0) {
                if (board.board[x][y - 1].equals("O")) {
                    return true;
                }
            }
            if (x + 1 < 10 && y + 1 < 10) {
                if (board.board[x + 1][y + 1].equals("O")) {
                    return true;
                }
            }
            if (x + 1 < 10 && y - 1 > 0) {
                if (board.board[x + 1][y - 1].equals("O")) {
                    return true;
                }
            }
            if (x - 1 > 0 && y + 1 < 10) {
                if (board.board[x - 1][y + 1].equals("O")) {
                    return true;
                }
            }
            if (x - 1 > 0 && y - 1 > 0) {
                if (board.board[x - 1][y - 1].equals("O")) {
                    return true;
                }
            }
            return false;
        }

        private static boolean shipIsInBounds(int[] userInputBoardCoordinatesX1Y1X2Y2) {
            for (int j : userInputBoardCoordinatesX1Y1X2Y2) {
                if (j > 9 || j < 0) {
                    System.out.println("Ship not in bounds");
                    return false;
                }
            }
            return true;
        }

        private static boolean validShipLength(int[] userInput, int shipLength) {
            ShipDirection shipDirection = calculateShipDirection(userInput);

            if (shipDirection.equals(ShipDirection.East)) {
                if (userInput[0] == userInput[2] - shipLength + 1) {
                    return true;
                }
            }
            if (shipDirection.equals(ShipDirection.West)) {
                if (userInput[2] == userInput[0] - shipLength + 1) {
                    return true;
                }
            }
            if (shipDirection.equals(ShipDirection.North)) {
                if (userInput[3] == userInput[1] - shipLength + 1) {
                    return true;
                }
            }
            if (shipDirection.equals(ShipDirection.South)) {
                return userInput[1] == userInput[3] - shipLength + 1;
            }

            return false;
        }

        private static boolean validShipDirection(int[] userInput) {
            return !calculateShipDirection(userInput).equals(ShipDirection.Invalid);
        }


        public static ShipDirection calculateShipDirection(int[] userInput) {
            if (userInput[0] < userInput[2] && (userInput[1] == userInput[3])) {
                return ShipDirection.East;
            } else if (userInput[0] > userInput[2] && (userInput[1] == userInput[3])) {
                return ShipDirection.West;
            } else if (userInput[0] == userInput[2] && (userInput[1] > userInput[3])) {
                return ShipDirection.North;
            } else if (userInput[0] == userInput[2] && (userInput[1] < userInput[3])) {
                return ShipDirection.South;
            }

            return ShipDirection.Invalid;
        }

        public static boolean isValidShot(int[] userShotCoordsX1Y1, Board board) {
            if (board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]].equals("X")) {
                System.out.println("This tile has already been hit!");
                return false;
            } else if (board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]].equals("M")) {
                System.out.println("This tile has already missed the ship");
                return false;
            }
            return true;
        }
    }
  learner_created: true
- name: src/battleship/utils/UserInput.java
  visible: true
  text: |+
    package battleship.utils;

    import java.util.Arrays;
    import java.util.Objects;
    import java.util.Scanner;


    public class UserInput {
        private UserInput() {
        }

        public static int[] getValidUserInput() {
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            System.out.println();
            String[] inputTokensUnprocessed = TokenizeTheInputForShipPlacement(input);
            String[] inputTokens = trimWhitespaceForShipPlacement(inputTokensUnprocessed);

            if (!shipPlacementTokensAreValid(inputTokens)) {
                System.out.println("Error");
                getValidUserInput();
            }


            return convertValidTokensToBoardCoordsX1Y1X2Y2(inputTokens);

        }

        public static int[] getTakeAShotInput() {
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            System.out.println();
            String[] inputTokensUnprocessed = tokenizeTheInputForTakeAShot(input);
            String[] inputTokens = trimWhitespaceForTakeAShot(inputTokensUnprocessed);

            while (!takeAShotTokensValid(inputTokens)) {
                System.out.println("Error! You entered the wrong coordinates! Try again:\n\n");
                input = scanner.nextLine();
                System.out.println();
                inputTokensUnprocessed = tokenizeTheInputForTakeAShot(input);
                inputTokens = trimWhitespaceForTakeAShot(inputTokensUnprocessed);

            }

            return convertValidTokensToBoardCoordsX1Y1(inputTokens);

        }


        private static int[] convertValidTokensToBoardCoordsX1Y1(String[] inputTokens) {
            int[] boardCoords = new int[inputTokens.length];
            int Y1 = inputTokens[0].charAt(0) - 65;
            int X1;
            if (Objects.equals(inputTokens[1], "10")) {
                X1 = 9;
            } else {
                X1 = inputTokens[1].charAt(0) - 49;
            }
            boardCoords[0] = X1;
            boardCoords[1] = Y1;

            System.out.println(Arrays.toString(boardCoords));

            return boardCoords;
        }

        private static int[] convertValidTokensToBoardCoordsX1Y1X2Y2(String[] inputTokens) {
            int[] boardCoords = new int[inputTokens.length];
            int Y1 = inputTokens[0].charAt(0) - 65;
            int Y2 = inputTokens[2].charAt(0) - 65;
            int X1;
            int X2;
            if (Objects.equals(inputTokens[1], "10")) {
                X1 = 9;
            } else {
                X1 = inputTokens[1].charAt(0) - 49;
            }
            if (Objects.equals(inputTokens[3], "10")) {
                X2 = 9;
            } else {
                X2 = inputTokens[3].charAt(0) - 49;
            }
            boardCoords[0] = X1;
            boardCoords[1] = Y1;
            boardCoords[2] = X2;
            boardCoords[3] = Y2;

            return boardCoords;
        }

        private static boolean shipPlacementTokensAreValid(String[] inputTokens) {
            String[] setOfValidInputsX = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
            String[] setOfValidInputsY = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};
            if (!Arrays.asList(setOfValidInputsY).contains(inputTokens[0])) {
                return false;
            } else if (!Arrays.asList(setOfValidInputsY).contains(inputTokens[2])) {
                return false;
            } else if (!Arrays.asList(setOfValidInputsX).contains(inputTokens[1])) {
                return false;
            } else return Arrays.asList(setOfValidInputsX).contains(inputTokens[3]);
        }

        private static boolean takeAShotTokensValid(String[] inputTokens) {
            String[] setOfValidInputsX = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
            String[] setOfValidInputsY = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};
            if (!Arrays.asList(setOfValidInputsY).contains(inputTokens[0])) {
                return false;
            } else return Arrays.asList(setOfValidInputsX).contains(inputTokens[1]);
        }

        private static String[] TokenizeTheInputForShipPlacement(String input) {
            return input.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)+");
        }

        private static String[] tokenizeTheInputForTakeAShot(String input) {
            return input.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)+");
        }

        private static String[] trimWhitespaceForShipPlacement(String[] input) {
            String[] trimmedArray = new String[4];
            /* deal with inputs of length 2 */
            for (int i = 0; i < input.length; i++) {
                trimmedArray[i] = input[i].trim();
            }
            return trimmedArray;
        }

        private static String[] trimWhitespaceForTakeAShot(String[] input) {
            String[] trimmedArray = new String[2];
            /* deal with inputs of length 2 */
            for (int i = 0; i < input.length; i++) {
                trimmedArray[i] = input[i].trim();
            }
            return trimmedArray;
        }
    }

  learner_created: true
- name: src/battleship/utils/GameUtils.java
  visible: true
  text: |
    package battleship.utils;

    import battleship.board.Board;

    public class GameUtils {
        private GameUtils() {

        }

        public static void placeAllShipsOnBoard(Board board) {
            board.displayBoardWithShips();
            placeAircraftCarrierMessage();
            initShip(board, 5, "Aircraft Carrier");
            board.displayBoardWithShips();
            placeBattleshipMessage();
            initShip(board, 4, "Battleship");
            board.displayBoardWithShips();
            placeSubmarineMessage();
            initShip(board, 3, "Submarine");
            board.displayBoardWithShips();
            placeCruiserMessage();
            initShip(board, 3, "Cruiser");
            board.displayBoardWithShips();
            placeDestroyerMessage();
            initShip(board, 2, "Destroyer");
            board.displayBoardWithShips();

        }

        private static void initShip(Board board, int shipLength, String shipName) {

            int[] userInput = UserInput.getValidUserInput();

            while (!Validation.isValidShipPlacement(userInput, board, shipLength, shipName)) {
                userInput = UserInput.getValidUserInput();
            }

            ShipAndShotsUtils.placeShipOnBoard(userInput, board, shipLength);

        }

        private static void placeAircraftCarrierMessage() {
            System.out.println("\n\nEnter the coordinates of the Aircraft Carrier (5 cells):\n");
        }

        private static void placeBattleshipMessage() {
            System.out.println("\n\nEnter the coordinates of the Battleship (4 cells):\n");
        }

        private static void placeSubmarineMessage() {
            System.out.println("\n\nEnter the coordinates of the Submarine (3 cells):\n");
        }

        private static void placeCruiserMessage() {
            System.out.println("\n\nEnter the coordinates of the Cruiser (3 cells):\n");
        }

        private static void placeDestroyerMessage() {
            System.out.println("\n\nEnter the coordinates of the Destroyer (2 cells):\n");
        }

        public static void takeAShot(Board board) {
            System.out.println("\nTake a shot!\n");

            int[] userShotCoordsX1Y1 = UserInput.getTakeAShotInput();


            while (!Validation.isValidShot(userShotCoordsX1Y1, board)) {
                userShotCoordsX1Y1 = UserInput.getTakeAShotInput();
            }
            ShipAndShotsUtils.takeShot(userShotCoordsX1Y1, board);

        }


    }
  learner_created: true
- name: src/battleship/enums/ShipDirection.java
  visible: true
  text: |
    package battleship.enums;

    public enum ShipDirection {
        East,
        West,
        South,
        North,
        SouthEast,
        SouthWest,
        NorthEast,
        NorthWest,
        Invalid
    }
  learner_created: true
- name: src/battleship/GameInstance.java
  visible: true
  text: |
    package battleship;

    import battleship.board.Board;
    import battleship.utils.GameUtils;


    public class GameInstance {

        Board board;

        public GameInstance() {
            startGame();
        }

        public void startGame() {
            this.board = new Board();
            GameUtils.placeAllShipsOnBoard(this.board);
            startGameLoop(board);
        }

        public void startGameLoop(Board board) {
            System.out.println("\n\nThe game starts!\n");
            boolean isGameOver = false;
            while (!isGameOver) {
                System.out.println();
                board.displayBoardWithFogOfWar();
                GameUtils.takeAShot(board);
                System.out.println();
                board.displayBoardWithShips();
            }
        }
    }
  learner_created: true
- name: src/battleship/board/Board.java
  visible: true
  text: |
    package battleship.board;

    public class Board {

        public String[][] board;

        public Board() {
            initBoard();
        }

        public void initBoard() {
            this.board = new String[10][10];
            for (int i = 0; i < this.board.length; i++) {
                for (int j = 0; j < this.board[0].length; j++) {
                    this.board[i][j] = "~";
                }
            }
        }

        public void displayBoardWithShips() {
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < this.board.length; i++) {
                if (i != 0) {
                    System.out.println();
                }
                for (int j = 0; j < this.board.length; j++) {
                    if (j == 0) {
                        System.out.print((char) (i + 65));
                    }
                    System.out.print(" " + board[j][i]);
                }
            }
        }

        public void displayBoardWithFogOfWar() {
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < this.board.length; i++) {
                if (i != 0) {
                    System.out.println();
                }
                for (int j = 0; j < this.board.length; j++) {
                    if (j == 0) {
                        System.out.print((char) (i + 65));
                    }
                    if(!board[j][i].equals("O")) {
                        System.out.print(" " + board[j][i]);
                    } else  {
                        System.out.print(" ~");
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/utils/ShipAndShotsUtils.java
  visible: true
  text: |
    package battleship.utils;

    import battleship.board.Board;
    import battleship.enums.ShipDirection;

    public class ShipAndShotsUtils {
        private ShipAndShotsUtils() {
        }

        public static void placeShipOnBoard(int[] userInputBoardCoordsX1Y1X2Y2, Board board, int shipLength) {
            ShipDirection shipDirection = Validation.calculateShipDirection(userInputBoardCoordsX1Y1X2Y2);

            for (int i = 0; i < shipLength; i++) {
                if (shipDirection.equals(ShipDirection.East)) {
                    board.board[userInputBoardCoordsX1Y1X2Y2[0] + i][userInputBoardCoordsX1Y1X2Y2[1]] = "O";
                } else if (shipDirection.equals(ShipDirection.West)) {
                    board.board[userInputBoardCoordsX1Y1X2Y2[0] - i][userInputBoardCoordsX1Y1X2Y2[1]] = "O";
                } else if (shipDirection.equals(ShipDirection.North)) {
                    board.board[userInputBoardCoordsX1Y1X2Y2[0]][userInputBoardCoordsX1Y1X2Y2[1] - i] = "O";
                } else if (shipDirection.equals(ShipDirection.South)) {
                    board.board[userInputBoardCoordsX1Y1X2Y2[0]][userInputBoardCoordsX1Y1X2Y2[1] + i] = "O";
                }
            }
        }

        public static void takeShot(int[] userShotCoordsX1Y1, Board board) {
            if (board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]].equals("~")) {
                board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]] = "M";
                System.out.println("\nYou missed!\n");
            } else if (board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]].equals("O")) {
                board.board[userShotCoordsX1Y1[0]][userShotCoordsX1Y1[1]] = "X";
                System.out.println("\nYou hit a ship!");
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10597#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 20 Jun 2022 17:17:00 UTC
record: 4
